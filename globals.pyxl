const SND_CURSOR_MOVE = {sound:coin_01_sound, volume: 100%}
const SND_CURSOR_ACCEPT = {sound:coin_00_sound, pitch:94.38%, volume: 100%}
const SND_CURSOR_BACK = {sound:coin_07_sound, volume: 100%}
const SND_BGMUSIC = {sound:loop_built_this_sound, volume:70%, loop:true}
const SND_BOMB_PLACE = {sound:hit_02_sound, volume:100%}
const SND_BOMB_EXPLODE = {sound:explode_08_sound, volume:50%}
const SND_BOX_BREAK = {sound:explode_01_sound, volume:70%}
const SND_POWERUP_PICKUP = {sound:coin_01_sound, volume: 100%}
const SND_BOMBER_DEATH = {sound:wild_06_sound, volume: 100%}
const SND_BOMBER_DEATH2 = {sound:sparks_02_sound, volume: 100%}
const SND_COUNTDOWN_TICK = {sound:blip_15_sound, volume: 100%}

const PLAYER_COLORS = [#f5a, #0af, #fd3, #4e4]

todo("copy bomb sprites into gameplay_sprite")
const BOMB_SPRITE = blocks_sprite[5][15]
const BOMB_FLASH_SPRITE = blocks_sprite[6][15]

const ALL_BOMBER_SPRITES = [
    engineer_sprite,
    mage_sprite,
    rogue_sprite,
    warrior_sprite,
    penguin_sprite,
]

// background music control
let bgmusic = ∅
def bgm_start():
    bgmusic = play_sound(SND_BGMUSIC)
def bgm_stop():
    stop_audio(bgmusic)
    bgmusic = ∅
def bgm_is_playing():
    return bgmusic ≠ ∅

// Used to fade the screen to black during a mode transition
def fade_out(frames_left, total_frames, data):
    let t = 1-(total_frames - frames_left) / total_frames
    set_post_effects({
        color: rgb(t,t,t),
        color_blend: "multiply"
        })
        
def is_zero(v2):
    return v2.x == 0 and v2.y == 0
def vec_str(v2):
    return "["+v2.x+","+v2.y+"]"

// Version of lerp() where t can be a vector
def vec_lerp(a, b, t):
    return (b - a) * t + a

// Construct an empty array iterable by array[x][y]
def make_array2d(w,h,val default nil):
    let arr = []
    resize(arr, w)
    for x < w:
        let column = []
        for y < h:
            push(column, val)
        arr[x] = column
    return arr

//
// Global game setup state, so we don't have to keep passing it from mode to mode
//

// Filled out in GameSetup.
const DEFAULT_GAME_INFO = {
    num_lives: 3,
    num_rounds: 3,
    seconds_per_round: 60,
    num_bots: 0,
}
let g_game_info = clone(DEFAULT_GAME_INFO)

// Filled out in PlayerSetup. A null entry means "no player in this slot". If non-null, the
// expected contents are { gamepad, spritesheet, is_cpu }
// In solo mode, we hard-code this in the main menu.
let g_player_infos = [∅,∅,∅,∅]

// Filled out in MapPoolSetup. Expected contents are a list of indices into MAPS_YAML.maps
let g_map_pool = []